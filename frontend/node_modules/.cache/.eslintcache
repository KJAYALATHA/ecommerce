[{"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\index.js":"1","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\App.js":"2","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\header.js":"4","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\footer.js":"5","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\HomeScreen.js":"6","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\product.js":"7","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\product.js":"8","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\Rating.js":"9","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\ProductScreen.js":"10","C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\index.js":"11","C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\App.js":"12","C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\reportWebVitals.js":"13","C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\components\\header.js":"14","C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\components\\footer.js":"15","C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\screens\\HomeScreen.js":"16","C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\screens\\ProductScreen.js":"17","C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\components\\product.js":"18","C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\product.js":"19","C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\components\\Rating.js":"20","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\store.js":"21","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\reducers\\productReducer.js":"22","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\constants\\productConstants.js":"23","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\actions\\productAction.js":"24","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\loader.js":"25","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\message.js":"26","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\CartScreen.js":"27","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\reducers\\cartReducers.js":"28","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\actions\\cartAction.js":"29","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\constants\\cartConstants.js":"30","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\reducers\\userReducer.js":"31","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\constants\\userConstants.js":"32","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\LoginScreen.js":"33","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\actions\\userActions.js":"34","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\FormContainer.js":"35","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\RegisterScreen.js":"36","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\ProfileScreen.js":"37","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\ShippingScreen.js":"38","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\CheckoutStep.js":"39","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\PaymentScreen.js":"40","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\PlaceOrderScreen.js":"41","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\reducers\\orderReducer.js":"42","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\actions\\orderActions.js":"43","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\constants\\orderConstants.js":"44","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\OrderScreen.js":"45","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\UserListScreen.js":"46","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\UserEditScreen.js":"47","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\ProductListScreen.js":"48","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\ProductEditScreen.js":"49","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\OrderListScreen.js":"50","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\SerachBox.js":"51","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\Paginate.js":"52","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\ProductCarousel.js":"53"},{"size":389,"mtime":1625737122562,"results":"54","hashOfConfig":"55"},{"size":2292,"mtime":1626776584407,"results":"56","hashOfConfig":"55"},{"size":362,"mtime":499162500000,"results":"57","hashOfConfig":"55"},{"size":3095,"mtime":1626937030591,"results":"58","hashOfConfig":"55"},{"size":477,"mtime":1625553847918,"results":"59","hashOfConfig":"55"},{"size":1603,"mtime":1626946538410,"results":"60","hashOfConfig":"55"},{"size":2851,"mtime":1625636397941,"results":"61","hashOfConfig":"55"},{"size":974,"mtime":1625567719850,"results":"62","hashOfConfig":"55"},{"size":1947,"mtime":1625573606940,"results":"63","hashOfConfig":"55"},{"size":11719,"mtime":1626932900618,"results":"64","hashOfConfig":"55"},{"size":318,"mtime":1625553609767,"results":"65","hashOfConfig":"66"},{"size":636,"mtime":1625573125858,"results":"67","hashOfConfig":"66"},{"size":362,"mtime":499162500000,"results":"68","hashOfConfig":"66"},{"size":990,"mtime":1625634031576,"results":"69","hashOfConfig":"66"},{"size":477,"mtime":1625553847918,"results":"70","hashOfConfig":"66"},{"size":862,"mtime":1625658509150,"results":"71","hashOfConfig":"66"},{"size":2627,"mtime":1625636382989,"results":"72","hashOfConfig":"66"},{"size":974,"mtime":1625567719850,"results":"73","hashOfConfig":"66"},{"size":2851,"mtime":1625636397941,"results":"74","hashOfConfig":"66"},{"size":1947,"mtime":1625573606940,"results":"75","hashOfConfig":"66"},{"size":2491,"mtime":1626945977945,"results":"76","hashOfConfig":"55"},{"size":4343,"mtime":1626945954128,"results":"77","hashOfConfig":"55"},{"size":1528,"mtime":1626945798611,"results":"78","hashOfConfig":"55"},{"size":5932,"mtime":1626946090490,"results":"79","hashOfConfig":"55"},{"size":417,"mtime":1625744976839,"results":"80","hashOfConfig":"55"},{"size":234,"mtime":1625745639411,"results":"81","hashOfConfig":"55"},{"size":5916,"mtime":1626175731486,"results":"82","hashOfConfig":"55"},{"size":1360,"mtime":1626348546847,"results":"83","hashOfConfig":"55"},{"size":2139,"mtime":1626246564896,"results":"84","hashOfConfig":"55"},{"size":286,"mtime":1626342215097,"results":"85","hashOfConfig":"55"},{"size":4100,"mtime":1626754873374,"results":"86","hashOfConfig":"55"},{"size":1512,"mtime":1626707818330,"results":"87","hashOfConfig":"55"},{"size":2444,"mtime":1626237760400,"results":"88","hashOfConfig":"55"},{"size":7705,"mtime":1626757080386,"results":"89","hashOfConfig":"55"},{"size":392,"mtime":1626089347788,"results":"90","hashOfConfig":"55"},{"size":4044,"mtime":1626185415938,"results":"91","hashOfConfig":"55"},{"size":6947,"mtime":1626756414574,"results":"92","hashOfConfig":"55"},{"size":2644,"mtime":1626242741559,"results":"93","hashOfConfig":"55"},{"size":1286,"mtime":1626241641750,"results":"94","hashOfConfig":"55"},{"size":1767,"mtime":1626243828458,"results":"95","hashOfConfig":"55"},{"size":5398,"mtime":1626416893906,"results":"96","hashOfConfig":"55"},{"size":3519,"mtime":1626782068967,"results":"97","hashOfConfig":"55"},{"size":6496,"mtime":1626782323089,"results":"98","hashOfConfig":"55"},{"size":1266,"mtime":1626782005895,"results":"99","hashOfConfig":"55"},{"size":10207,"mtime":1626848796711,"results":"100","hashOfConfig":"55"},{"size":3631,"mtime":1626757234358,"results":"101","hashOfConfig":"55"},{"size":4022,"mtime":1626756631605,"results":"102","hashOfConfig":"55"},{"size":5131,"mtime":1626945153628,"results":"103","hashOfConfig":"55"},{"size":8139,"mtime":1626770081565,"results":"104","hashOfConfig":"55"},{"size":3632,"mtime":1626776668680,"results":"105","hashOfConfig":"55"},{"size":1125,"mtime":1626939065866,"results":"106","hashOfConfig":"55"},{"size":956,"mtime":1626944797039,"results":"107","hashOfConfig":"55"},{"size":1456,"mtime":1626946458715,"results":"108","hashOfConfig":"55"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},"jf1d8k",{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ebash8",{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"111"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"111"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"111"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"111"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"111"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"111"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"111"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"111"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"111"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\index.js",[],["226","227"],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\App.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\header.js",["228"],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\footer.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\HomeScreen.js",["229"],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\product.js",[],["230","231"],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\product.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\Rating.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\ProductScreen.js",["232"],"C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\index.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\App.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\reportWebVitals.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\components\\header.js",["233","234"],"C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\components\\footer.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\screens\\HomeScreen.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\screens\\ProductScreen.js",["235","236"],"C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\components\\product.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\product.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\FRONTEND\\src\\components\\Rating.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\store.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\reducers\\productReducer.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\constants\\productConstants.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\actions\\productAction.js",["237","238"],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\loader.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\message.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\CartScreen.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\reducers\\cartReducers.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\actions\\cartAction.js",["239"],"// import axios from \"axios\";\r\n// import { CART_ADD_ITEM } from '../constants/cartConstants'\r\n\r\n// export const addToCart = (id,qty) => async (dispatch,getState)=>{\r\n\r\n//     const {data} = await axios.get(`/api/products/${id}`)\r\n\r\n//     dispatch({\r\n//         type:CART_ADD_ITEM,\r\n//         payload :{\r\n//             product:data._id,\r\n//             name:data.name,\r\n//             image:data.image,\r\n//             price:data.price,\r\n//             countInStock:data.countInStock,\r\n//             qty,\r\n        \r\n//         }\r\n//     })\r\n\r\n//     localStorage.setItem('cartItem',JSON.stringify(getState().cart.cartItems))\r\n\r\n\r\n\r\n// }\r\n\r\nimport axios from \"axios\";\r\n   \r\n   import { CART_ADD_ITEM,\r\n    CART_REMOVE_ITEM,\r\n    CART_SAVE_SHIPPING_ADDRESS,\r\n    CART_SAVE_PAYMENT_METHOD} \r\n    from '../constants/cartConstants'\r\n\r\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\r\n    const { data } = await axios.get(`/api/products/${id}`)\r\n\r\n    dispatch({\r\n        type: CART_ADD_ITEM,\r\n        payload: {\r\n            product: data._id,\r\n            name: data.name,\r\n            image: data.image,\r\n            price: data.price,\r\n            countInStock: data.countInStock,\r\n            qty,\r\n        }\r\n    })\r\n\r\n    localStorage.setItem('cartItem', JSON.stringify(getState().cart.cartItems))\r\n\r\n}\r\n\r\nexport const removeFromcart = (id) => async(dispatch,getState) =>{\r\n    const { data } = await axios.get(`/api/products/${id}`)\r\n    dispatch({\r\n        type: CART_REMOVE_ITEM,\r\n        payload: id\r\n    })\r\n\r\n    localStorage.setItem('cartItem', JSON.stringify(getState().cart.cartItems))\r\n\r\n}\r\n\r\nexport const saveShippingAddress = (data) => (dispatch) =>{\r\n    dispatch({\r\n        type: CART_SAVE_SHIPPING_ADDRESS,\r\n        payload: data\r\n    })\r\n\r\n    localStorage.setItem('shippingAddress', JSON.stringify(data))\r\n\r\n}\r\n\r\nexport const savePaymentMethod = (data) => (dispatch) =>{\r\n    dispatch({\r\n        type: CART_SAVE_PAYMENT_METHOD,\r\n        payload: data\r\n    })\r\n    console.log(data,\"savePayement methos in action\");\r\n\r\n    localStorage.setItem('paymentMethod', JSON.stringify(data))\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\constants\\cartConstants.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\reducers\\userReducer.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\LoginScreen.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\actions\\userActions.js",["240"],"import axios from 'axios'\r\nimport {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET,\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n\r\n} from '../constants/userConstants'\r\n\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/login/',\r\n            { 'username': email, 'password': password },\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({ type: USER_LOGOUT })\r\n    dispatch({ type: USER_DETAILS_RESET })\r\n    dispatch({ type: ORDER_LIST_MY_RESET })\r\n    dispatch({ type: USER_LIST_RESET })\r\n}\r\n\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/register/',\r\n            { 'name': name, 'email': email, 'password': password },\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/profile/update/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/users/delete/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DELETE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/update/${user._id}/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_SUCCESS,\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\FormContainer.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\RegisterScreen.js",["241"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Row, Col, Form } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../components/loader\";\r\nimport Message from \"../components/message\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { register } from \"../actions/userActions\";\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const { error, loading, userInfo } = userRegister\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(register(name, email, password))\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign In</h1>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Register\r\n                </Button>\r\n\r\n            </Form>\r\n\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Have an Account? <Link\r\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n                        Sign In\r\n                        </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer >\r\n    )\r\n}\r\n\r\nexport default RegisterScreen","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\ProfileScreen.js",["242","243"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/loader'\r\nimport Message from '../components/message'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\nimport { listMyOrders } from '../actions/orderActions'\r\n\r\nfunction ProfileScreen({ history }) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    const orderListMy = useSelector(state => state.orderListMy)\r\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            if (!user || !user.name || success || userInfo._id !== user._id) {\r\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n                dispatch(getUserDetails('profile'))\r\n                dispatch(listMyOrders())\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [dispatch, history, userInfo, user, success])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(updateUserProfile({\r\n                'id': user._id,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password\r\n            }))\r\n            setMessage('')\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Row>\r\n            <Col md={3}>\r\n                <h2>User Profile</h2>\r\n\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {loading && <Loader />}\r\n                <Form onSubmit={submitHandler}>\r\n\r\n                    <Form.Group controlId='name'>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='name'\r\n                            placeholder='Enter name'\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='email'>\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='email'\r\n                            placeholder='Enter Email'\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='password'>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Enter Password'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='passwordConfirm'>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Confirm Password'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Button type='submit' variant='primary'>\r\n                        Update\r\n                </Button>\r\n\r\n                </Form>\r\n            </Col>\r\n\r\n            <Col md={9}>\r\n                <h2>My Orders</h2>\r\n                {loadingOrders ? (\r\n                    <Loader />\r\n                ) : errorOrders ? (\r\n                    <Message variant='danger'>{errorOrders}</Message>\r\n                ) : (\r\n                            <Table striped responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>Date</th>\r\n                                        <th>Total</th>\r\n                                        <th>Paid</th>\r\n                                        <th>Delivered</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {orders.map(order => (\r\n                                        <tr key={order._id}>\r\n                                            <td>{order._id}</td>\r\n                                            <td>{order.createdAt.substring(0, 10)}</td>\r\n                                            <td>${order.totalPrice}</td>\r\n                                            <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\r\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                                            )}</td>\r\n                                            <td>\r\n                                                <LinkContainer to={`/order/${order._id}`}>\r\n                                                    <Button className='btn-sm'>Details</Button>\r\n                                                </LinkContainer>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                        )}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\ShippingScreen.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\CheckoutStep.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\PaymentScreen.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\PlaceOrderScreen.js",["244"],"import React, { useEffect } from \"react\";\r\nimport { Button, Row, Col, ListGroup, Image, Card } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CheckoutSteps from \"../components/CheckoutStep\";\r\nimport Message from \"../components/message\";\r\nimport { createOrder } from \"../actions/orderActions\";\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const orderCreate = useSelector((state) => state.orderCreate);\r\n  const {order,success,error} = orderCreate;\r\n\r\n  const cart = useSelector((state) => state.cart);\r\n  cart.itemsPrice = cart.cartItems\r\n    .reduce((acc, item) => acc + item.price * item.qty, 0)\r\n    .toFixed(2);\r\n  cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2);\r\n  cart.taxPrice = Number(0.082 * cart.itemsPrice).toFixed(2);\r\n  cart.totalPrice = (\r\n    Number(cart.itemsPrice) +\r\n    Number(cart.taxPrice) +\r\n    Number(cart.shippingPrice)\r\n  ).toFixed(2);\r\n\r\n  if(!cart.paymentMethod){\r\n    history.push('/payment')\r\n  }\r\n\r\n  useEffect (()=>{\r\n if(success){\r\n      console.log(\"place order\",order._id);\r\n      history.push(`/order/${order._id}`)\r\n      dispatch({type:ORDER_CREATE_RESET})\r\n    }\r\n  },[success,history])\r\n\r\n  const placeOrder = () => {\r\n    console.log(\"place order\");\r\n    dispatch(\r\n      createOrder({\r\n        orderItems: cart.cartItems,\r\n        shippingAddress: cart.shippingAddress,  \r\n        paymentMethod: cart.paymentMethod,\r\n        itemsPrice: cart.itemsPrice,\r\n        shippingPrice: cart.shippingPrice,\r\n        taxPrice: cart.taxPrice,\r\n        totalPrice: cart.totalPrice,\r\n      })\r\n\r\n    );\r\n    //history.push(`/order/${order._id}`)\r\n  };\r\n  return (\r\n    <div>\r\n      <CheckoutSteps step1 step2 step3 step4 />\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant=\"flush\">\r\n            <ListGroup.Item>\r\n              <h2>Shipping</h2>\r\n              <p>\r\n                <strong>Shipping:</strong>\r\n                {cart.shippingAddress.address},{cart.shippingAddress.city}{\" \"}\r\n                {cart.shippingAddress.postalCode},{\" \"}\r\n                {cart.shippingAddress.country},\r\n              </p>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2>Payment Method</h2>\r\n              <p>\r\n                <strong>Method:</strong>\r\n                {cart.paymentMethod}\r\n              </p>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              <h2>Order Items</h2>\r\n\r\n              {cart.cartItems.length === 0 ? (\r\n                <Message variant=\"info\">Your cart is empty</Message>\r\n              ) : (\r\n                <ListGroup variant=\"flush\">\r\n                  {cart.cartItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n\r\n                        <Col>\r\n                          <Link to={`/products/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} X ${item.price} = $\r\n                          {(item.qty * item.price).toFixed(2)}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant=\"flush\">\r\n              <ListGroup.Item>\r\n                <h2>Order Summary</h2>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Item:</Col>\r\n                  <Col>${cart.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping:</Col>\r\n                  <Col>${cart.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax:</Col>\r\n                  <Col>${cart.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total:</Col>\r\n                  <Col>${cart.totalPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Button\r\n                  type=\"submit\"\r\n                  onClick={placeOrder}\r\n                  disabled={cart.cartItems === 0}\r\n                  className=\"btn-block\"\r\n                >\r\n                  Place Order\r\n                </Button>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlaceOrderScreen;\r\n","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\reducers\\orderReducer.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\actions\\orderActions.js",["245","246","247"],"import { ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL ,\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_RESET,\r\n    ORDER_LIST_MY_REQUEST,\r\n  ORDER_LIST_MY_SUCCESS,\r\n  ORDER_LIST_MY_FAIL,\r\n  ORDER_LIST_MY_RESET,\r\n\r\n  ORDER_LIST_REQUEST,\r\n  ORDER_LIST_SUCCESS,\r\n  ORDER_LIST_FAIL,\r\n\r\n\r\n  ORDER_DELIVER_REQUEST,\r\n  ORDER_DELIVER_SUCCESS,\r\n  ORDER_DELIVER_FAIL,\r\n  ORDER_DELIVER_RESET,} \r\n    from '../constants/orderConstants'\r\nimport axios from \"axios\";\r\nimport { CART_CLEAR_ITEM } from '../constants/cartConstants'\r\n\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n      console.log(\"jayalatha this is from orderaction\");\r\n  \r\n      dispatch({\r\n        type: ORDER_CREATE_REQUEST,\r\n      });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState(); //this is for to get the token from loged in user because we kept the updateUserdetail as authendicated\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n  \r\n      const { data } = await axios.post(\r\n        `/api/orders/add/`,\r\n        order,\r\n        config\r\n      );\r\n  \r\n      dispatch({\r\n        type: ORDER_CREATE_SUCCESS,\r\n        payload: data,\r\n      });\r\n      dispatch({\r\n        type: CART_CLEAR_ITEM,\r\n        payload: data,\r\n      });\r\n      localStorage.removeItem('cartItem')\r\n     \r\n     \r\n    } catch (error) {\r\n      console.log(\"catch the error this is from userAction\");\r\n  \r\n      dispatch({\r\n        type: ORDER_CREATE_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n      console.log(\"catch the error this is from userAction\");\r\n        dispatch({\r\n            type: ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const payOrder = (id,paymentResult) => async (dispatch, getState) => {\r\n  try {\r\n      dispatch({\r\n          type: ORDER_PAY_REQUEST\r\n      })\r\n\r\n      const {\r\n          userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n          headers: {\r\n              'Content-type': 'application/json',\r\n              Authorization: `Bearer ${userInfo.token}`\r\n          }\r\n      }\r\n\r\n      const { data } = await axios.put(\r\n          `/api/orders/${id}/pay`,\r\n          paymentResult,\r\n          config\r\n      )\r\n\r\n      dispatch({\r\n          type: ORDER_PAY_SUCCESS,\r\n          payload: data\r\n      })\r\n\r\n\r\n  } catch (error) {\r\n    console.log(\"catch the error this is from userAction\");\r\n      dispatch({\r\n          type: ORDER_PAY_FAIL,\r\n          payload: error.response && error.response.data.detail\r\n              ? error.response.data.detail\r\n              : error.message,\r\n      })\r\n  }\r\n}\r\n\r\n\r\nexport const listMyOrders = (id) => async (dispatch, getState) => {\r\n  try {\r\n      dispatch({\r\n          type: ORDER_LIST_MY_REQUEST\r\n      })\r\n\r\n      const {\r\n          userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n          headers: {\r\n              'Content-type': 'application/json',\r\n              Authorization: `Bearer ${userInfo.token}`\r\n          }\r\n      }\r\n\r\n      const { data } = await axios.get(\r\n          `/api/orders/myorders/`,\r\n          config\r\n      )\r\n\r\n      dispatch({\r\n          type: ORDER_LIST_MY_SUCCESS,\r\n          payload: data\r\n      })\r\n\r\n\r\n  } catch (error) {\r\n    console.log(\"catch the error this is from userAction\");\r\n      dispatch({\r\n          type: ORDER_LIST_MY_FAIL,\r\n          payload: error.response && error.response.data.detail\r\n              ? error.response.data.detail\r\n              : error.message,\r\n      })\r\n  }\r\n}\r\n\r\n\r\nexport const listOrders = () => async (dispatch, getState) => {\r\n  try {\r\n      dispatch({\r\n          type: ORDER_LIST_REQUEST\r\n      })\r\n\r\n      const {\r\n          userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n          headers: {\r\n              'Content-type': 'application/json',\r\n              Authorization: `Bearer ${userInfo.token}`\r\n          }\r\n      }\r\n\r\n      const { data } = await axios.get(\r\n          `/api/orders/`,\r\n          config\r\n      )\r\n\r\n      dispatch({\r\n          type: ORDER_LIST_SUCCESS,\r\n          payload: data\r\n      })\r\n\r\n\r\n  } catch (error) {\r\n    console.log(\"catch the error this is from userAction\");\r\n      dispatch({\r\n          type: ORDER_LIST_FAIL,\r\n          payload: error.response && error.response.data.detail\r\n              ? error.response.data.detail\r\n              : error.message,\r\n      })\r\n  }\r\n}\r\n\r\n\r\nexport const deliverOrder = (order) => async (dispatch, getState) => {\r\n  try {\r\n      dispatch({\r\n          type: ORDER_DELIVER_REQUEST\r\n      })\r\n\r\n      const {\r\n          userLogin: { userInfo },\r\n      } = getState()\r\n\r\n      const config = {\r\n          headers: {\r\n              'Content-type': 'application/json',\r\n              Authorization: `Bearer ${userInfo.token}`\r\n          }\r\n      }\r\n\r\n      const { data } = await axios.put(\r\n          `/api/orders/${order._id}/deliver`,\r\n          {},\r\n        \r\n          config\r\n      )\r\n\r\n      dispatch({\r\n          type: ORDER_DELIVER_SUCCESS,\r\n          payload: data\r\n      })\r\n\r\n\r\n  } catch (error) {\r\n    console.log(\"catch the error this is from userAction\");\r\n      dispatch({\r\n          type: ORDER_DELIVER_FAIL,\r\n          payload: error.response && error.response.data.detail\r\n              ? error.response.data.detail\r\n              : error.message,\r\n      })\r\n  }\r\n}","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\constants\\orderConstants.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\OrderScreen.js",["248"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport Message from '../components/message'\r\nimport Loader from '../components/loader'\r\nimport { getOrderDetails, payOrder, deliverOrder } from '../actions/orderActions'\r\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\r\n\r\nfunction OrderScreen({ match, history }) {\r\n    const orderId = match.params.id\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const { order, error, loading } = orderDetails\r\n\r\n    const orderPay = useSelector(state => state.orderPay)\r\n    const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n    const orderDeliver = useSelector(state => state.orderDeliver)\r\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n    if (!loading && !error) {\r\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    }\r\n\r\n  //AQVKjliD0Pjeb16HbHLGs2KaGoRlg5D3Nsae3aIAZLuRsRTVl9PGtnKUr-5j-26Gw0zIND7YntGC0e_B\r\n    const addPayPalScript = () => {\r\n        const script = document.createElement('script')\r\n        script.type = 'text/javascript'\r\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AeDXja18CkwFUkL-HQPySbzZsiTrN52cG13mf9Yz7KiV2vNnGfTDP0wDEN9sGlhZHrbb_USawcJzVDgn'\r\n        script.async = true\r\n        script.onload = () => {\r\n            setSdkReady(true)\r\n        } \r\n        document.body.appendChild(script)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (!order || successPay || order._id !== Number(orderId) || successDeliver) {\r\n            dispatch({ type: ORDER_PAY_RESET })\r\n            dispatch({ type: ORDER_DELIVER_RESET })\r\n\r\n            dispatch(getOrderDetails(orderId))\r\n        } else if (!order.isPaid) {\r\n            if (!window.paypal) {\r\n                addPayPalScript()\r\n            } else {\r\n                setSdkReady(true)\r\n            }\r\n        }\r\n    }, [dispatch, order, orderId, successPay, successDeliver])\r\n\r\n\r\n    const successPaymentHandler = (paymentResult) => {\r\n        dispatch(payOrder(orderId, paymentResult))\r\n    }\r\n\r\n    const deliverHandler = () => {\r\n        dispatch(deliverOrder(order))\r\n    }\r\n\r\n    return loading ? (\r\n        <Loader />\r\n    ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n    ) : (\r\n                <div>\r\n                    <h1>Order: {order.Id}</h1>\r\n                    <Row>\r\n                        <Col md={8}>\r\n                            <ListGroup variant='flush'>\r\n                                <ListGroup.Item>\r\n                                    <h2>Shipping</h2>\r\n                                    <p><strong>Name: </strong> {order.user.name}</p>\r\n                                    <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\r\n                                    <p>\r\n                                        <strong>Shipping: </strong>\r\n                                        {order.shippingAddress.address},  {order.shippingAddress.city}\r\n                                        {'  '}\r\n                                        {order.shippingAddress.postalCode},\r\n                                {'  '}\r\n                                        {order.shippingAddress.country}\r\n                                    </p>\r\n\r\n                                    {order.isDelivered ? (\r\n                                        <Message variant='success'>Delivered on {order.deliveredAt}</Message>\r\n                                    ) : (\r\n                                            <Message variant='warning'>Not Delivered</Message>\r\n                                        )}\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <h2>Payment Method</h2>\r\n                                    <p>\r\n                                        <strong>Method: </strong>\r\n                                        {order.paymentMethod}\r\n                                    </p>\r\n                                    {order.isPaid ? (\r\n                                        <Message variant='success'>Paid on {order.paidAt}</Message>\r\n                                    ) : (\r\n                                            <Message variant='warning'>Not Paid</Message>\r\n                                        )}\r\n\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <h2>Order Items</h2>\r\n                                    {order.orderItems.length === 0 ? <Message variant='info'>\r\n                                        Order is empty\r\n                            </Message> : (\r\n                                            <ListGroup variant='flush'>\r\n                                                {order.orderItems.map((item, index) => (\r\n                                                    <ListGroup.Item key={index}>\r\n                                                        <Row>\r\n                                                            <Col md={1}>\r\n                                                                <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                            </Col>\r\n\r\n                                                            <Col>\r\n                                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                            </Col>\r\n\r\n                                                            <Col md={4}>\r\n                                                                {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </ListGroup.Item>\r\n                                                ))}\r\n                                            </ListGroup>\r\n                                        )}\r\n                                </ListGroup.Item>\r\n\r\n                            </ListGroup>\r\n\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                            <Card>\r\n                                <ListGroup variant='flush'>\r\n                                    <ListGroup.Item>\r\n                                        <h2>Order Summary</h2>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Items:</Col>\r\n                                            <Col>${order.itemsPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Shipping:</Col>\r\n                                            <Col>${order.shippingPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Tax:</Col>\r\n                                            <Col>${order.taxPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Total:</Col>\r\n                                            <Col>${order.totalPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n\r\n                                    {!order.isPaid && (\r\n                                        <ListGroup.Item>\r\n                                            {loadingPay && <Loader />}\r\n\r\n                                            {!sdkReady ? (\r\n                                                <Loader />\r\n                                            ) : (\r\n                                                    <PayPalButton\r\n                                                        amount={order.totalPrice}\r\n                                                        onSuccess={successPaymentHandler}\r\n                                                    />\r\n                                                )}\r\n                                        </ListGroup.Item>\r\n                                    )}\r\n                                </ListGroup>\r\n                                {loadingDeliver && <Loader />}\r\n                                {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n                                    <ListGroup.Item>\r\n                                        <Button\r\n                                            type='button'\r\n                                            className='btn btn-block'\r\n                                            onClick={deliverHandler}\r\n                                        >\r\n                                            Mark As Delivered\r\n                                        </Button>\r\n                                    </ListGroup.Item>\r\n                                )}\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n}\r\n\r\nexport default OrderScreen","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\UserListScreen.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\UserEditScreen.js",["249"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/loader'\r\nimport Message from '../components/message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n\r\n    const userId = match.params.id\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\r\n\r\n    useEffect(() => {\r\n\r\n        if (successUpdate) {\r\n            dispatch({ type: USER_UPDATE_RESET })\r\n            history.push('/admin/userlist')\r\n        } else {\r\n\r\n            if (!user.name || user._id !== Number(userId)) {\r\n                dispatch(getUserDetails(userId))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setIsAdmin(user.isAdmin)\r\n            }\r\n        }\r\n\r\n    }, [user, userId, successUpdate, history])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/admin/userlist'>\r\n                Go Back\r\n            </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit User</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Form onSubmit={submitHandler}>\r\n\r\n                            <Form.Group controlId='name'>\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='name'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='email'>\r\n                                <Form.Label>Email Address</Form.Label>\r\n                                <Form.Control\r\n                                    type='email'\r\n                                    placeholder='Enter Email'\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='isadmin'>\r\n                                <Form.Check\r\n                                    type='checkbox'\r\n                                    label='Is Admin'\r\n                                    checked={isAdmin}\r\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\r\n                                >\r\n                                </Form.Check>\r\n                            </Form.Group>\r\n\r\n                            <Button type='submit' variant='primary'>\r\n                                Update\r\n                        </Button>\r\n\r\n                        </Form>\r\n                    )}\r\n\r\n            </FormContainer >\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default UserEditScreen","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\ProductListScreen.js",["250"],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\ProductEditScreen.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\screens\\OrderListScreen.js",["251"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/loader'\r\nimport Message from '../components/message'\r\nimport { listOrders } from '../actions/orderActions'\r\n\r\nfunction OrderListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector(state => state.orderList)\r\n    const { loading, error, orders } = orderList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listOrders())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, userInfo])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Orders</h1>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>USER</th>\r\n                                    <th>DATE</th>\r\n                                    <th>Total</th>\r\n                                    <th>PAID</th>\r\n                                    <th>DELIVERED</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {orders.map(order => (\r\n                                    <tr key={order._id}>\r\n                                        <td>{order._id}</td>\r\n                                        <td>{order.user && order.user.name}</td>\r\n                                        <td>{order.createdAt.substring(0, 10)}</td>\r\n                                        <td>${order.totalPrice}</td>\r\n\r\n                                        <td>{order.isPaid ? (\r\n                                            order.paidAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td>\r\n\r\n                                        <td>{order.isDelivered ? (\r\n                                            order.deliveredAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/order/${order._id}`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    Details\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListScreen","C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\SerachBox.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\Paginate.js",[],"C:\\Users\\kjaya\\Desktop\\ecommerce\\frontend\\src\\components\\ProductCarousel.js",[],{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","severity":1,"message":"257","line":3,"column":34,"nodeType":"258","messageId":"259","endLine":3,"endColumn":37},{"ruleId":"256","severity":1,"message":"260","line":2,"column":17,"nodeType":"258","messageId":"259","endLine":2,"endColumn":25},{"ruleId":"252","replacedBy":"261"},{"ruleId":"254","replacedBy":"262"},{"ruleId":"263","severity":1,"message":"264","line":142,"column":84,"nodeType":"265","messageId":"266","endLine":142,"endColumn":86},{"ruleId":"256","severity":1,"message":"257","line":2,"column":34,"nodeType":"258","messageId":"259","endLine":2,"endColumn":37},{"ruleId":"256","severity":1,"message":"267","line":2,"column":39,"nodeType":"258","messageId":"259","endLine":2,"endColumn":42},{"ruleId":"263","severity":1,"message":"264","line":8,"column":46,"nodeType":"265","messageId":"266","endLine":8,"endColumn":48},{"ruleId":"263","severity":1,"message":"264","line":52,"column":119,"nodeType":"265","messageId":"266","endLine":52,"endColumn":121},{"ruleId":"256","severity":1,"message":"268","line":28,"column":5,"nodeType":"258","messageId":"259","endLine":28,"endColumn":24},{"ruleId":"256","severity":1,"message":"269","line":94,"column":15,"nodeType":"258","messageId":"259","endLine":94,"endColumn":19},{"ruleId":"256","severity":1,"message":"269","line":55,"column":13,"nodeType":"258","messageId":"259","endLine":55,"endColumn":17},{"ruleId":"256","severity":1,"message":"270","line":21,"column":5,"nodeType":"258","messageId":"259","endLine":21,"endColumn":30},{"ruleId":"263","severity":1,"message":"271","line":34,"column":22,"nodeType":"265","messageId":"266","endLine":34,"endColumn":24},{"ruleId":"256","severity":1,"message":"272","line":2,"column":10,"nodeType":"258","messageId":"259","endLine":2,"endColumn":14},{"ruleId":"263","severity":1,"message":"271","line":53,"column":22,"nodeType":"265","messageId":"266","endLine":53,"endColumn":24},{"ruleId":"273","severity":1,"message":"274","line":38,"column":5,"nodeType":"275","endLine":38,"endColumn":22,"suggestions":"276"},{"ruleId":"256","severity":1,"message":"277","line":10,"column":5,"nodeType":"258","messageId":"259","endLine":10,"endColumn":20},{"ruleId":"256","severity":1,"message":"278","line":14,"column":3,"nodeType":"258","messageId":"259","endLine":14,"endColumn":22},{"ruleId":"256","severity":1,"message":"279","line":24,"column":3,"nodeType":"258","messageId":"259","endLine":24,"endColumn":22},{"ruleId":"273","severity":1,"message":"280","line":65,"column":8,"nodeType":"275","endLine":65,"endColumn":62,"suggestions":"281"},{"ruleId":"273","severity":1,"message":"282","line":43,"column":8,"nodeType":"275","endLine":43,"endColumn":46,"suggestions":"283"},{"ruleId":"256","severity":1,"message":"260","line":1,"column":17,"nodeType":"258","messageId":"259","endLine":1,"endColumn":25},{"ruleId":"256","severity":1,"message":"260","line":1,"column":17,"nodeType":"258","messageId":"259","endLine":1,"endColumn":25},"no-native-reassign",["284"],"no-negated-in-lhs",["285"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.",["284"],["285"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Col' is defined but never used.","'PRODUCT_TOP_REQUEST' is defined but never used.","'data' is assigned a value but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","Expected '!==' and instead saw '!='.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.","ArrayExpression",["286"],"'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["287"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["288"],"no-global-assign","no-unsafe-negation",{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"295","text":"296"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"297","text":"298"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"299","text":"300"},[1313,1330],"[success, history, order._id, dispatch]",[2421,2475],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]",[1474,1512],"[user, userId, successUpdate, history, dispatch]"]