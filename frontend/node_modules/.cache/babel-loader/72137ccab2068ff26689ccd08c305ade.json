{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducer';\nimport { cartReducer } from './reducers/cartReducers';\nimport { orderCreateReducer, orderDetailReducer, orderPayReducer } from './reducers/orderReducer';\nimport { userLoginReducer, userRegisterReducer, userDetailReducer, userUpdateProfileReducer } from './reducers/userReducer';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  producDetail: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  //userLogin is the name given to the initial state\n  userRegister: userRegisterReducer,\n  userDetail: userDetailReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailReducer,\n  orderPay: orderPayReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItem') ? JSON.parse(localStorage.getItem('cartItem')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingInfoFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingInfoFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  } //userInfo is a name given in reducer\n\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/kjaya/Desktop/ecommerce/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","orderCreateReducer","orderDetailReducer","orderPayReducer","userLoginReducer","userRegisterReducer","userDetailReducer","userUpdateProfileReducer","reducer","productList","producDetail","cart","userLogin","userRegister","userDetail","userUpdateProfile","orderCreate","orderDetails","orderPay","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingInfoFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAqBC,eAArB,EAAqCC,eAArC,QAA4D,OAA5D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,kBAAT,EAA4BC,qBAA5B,QAAyD,2BAAzD;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,kBAAT,EAA4BC,kBAA5B,EAA+CC,eAA/C,QAAsE,yBAAtE;AACA,SAASC,gBAAT,EAA0BC,mBAA1B,EAA8CC,iBAA9C,EAAgEC,wBAAhE,QAAgG,wBAAhG;AAEA,MAAMC,OAAO,GAAGd,eAAe,CAAC;AAC5Be,EAAAA,WAAW,EAAGX,kBADc;AAE5BY,EAAAA,YAAY,EAAGX,qBAFa;AAG5BY,EAAAA,IAAI,EAACX,WAHuB;AAI5BY,EAAAA,SAAS,EAACR,gBAJkB;AAIA;AAC5BS,EAAAA,YAAY,EAAER,mBALc;AAM5BS,EAAAA,UAAU,EAAGR,iBANe;AAO5BS,EAAAA,iBAAiB,EAACR,wBAPU;AAQ5BS,EAAAA,WAAW,EAACf,kBARgB;AAS5BgB,EAAAA,YAAY,EAACf,kBATe;AAU5BgB,EAAAA,QAAQ,EAACf;AAVmB,CAAD,CAA/B;AAaA,MAAMgB,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAkCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAlC,GAA+E,EAA5G;AAEA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAkCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAlC,GAA+E,IAA3G;AACA,MAAMI,uBAAuB,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAAyCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAAzC,GAA6F,EAA7H;AAEA,MAAMK,YAAY,GAAG;AACjBf,EAAAA,IAAI,EAAC;AAACgB,IAAAA,SAAS,EAACR,oBAAX;AACDS,IAAAA,eAAe,EAACH;AADf,GADY;AAGjBb,EAAAA,SAAS,EAAC;AAACiB,IAAAA,QAAQ,EAACL;AAAV,GAHO,CAGwB;;AAHxB,CAArB;AAMA,MAAMM,UAAU,GAAG,CAAClC,KAAD,CAAnB;AAEA,MAAMmC,KAAK,GAAGtC,WAAW,CAACe,OAAD,EAASkB,YAAT,EAAsB7B,mBAAmB,CAACF,eAAe,CAAC,GAAGmC,UAAJ,CAAhB,CAAzC,CAAzB;AAEA,eAAgBC,KAAhB","sourcesContent":["import { createStore,combineReducers,applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { productListReducer,productDetailsReducer } from './reducers/productReducer'\r\nimport { cartReducer } from './reducers/cartReducers'\r\nimport { orderCreateReducer,orderDetailReducer,orderPayReducer } from './reducers/orderReducer'\r\nimport { userLoginReducer,userRegisterReducer,userDetailReducer,userUpdateProfileReducer } from './reducers/userReducer'\r\n\r\nconst reducer = combineReducers({\r\n    productList : productListReducer,\r\n    producDetail : productDetailsReducer,\r\n    cart:cartReducer,\r\n    userLogin:userLoginReducer ,//userLogin is the name given to the initial state\r\n    userRegister :userRegisterReducer,\r\n    userDetail : userDetailReducer,\r\n    userUpdateProfile:userUpdateProfileReducer,\r\n    orderCreate:orderCreateReducer,\r\n    orderDetails:orderDetailReducer,\r\n    orderPay:orderPayReducer,\r\n})\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItem')? JSON.parse(localStorage.getItem('cartItem')):[]\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo')? JSON.parse(localStorage.getItem('userInfo')):null\r\nconst shippingInfoFromStorage = localStorage.getItem('shippingAddress')? JSON.parse(localStorage.getItem('shippingAddress')):{}\r\n\r\nconst initialState = {\r\n    cart:{cartItems:cartItemsFromStorage,\r\n        shippingAddress:shippingInfoFromStorage},\r\n    userLogin:{userInfo:userInfoFromStorage} //userInfo is a name given in reducer\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer,initialState,composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\nexport default  store"]},"metadata":{},"sourceType":"module"}